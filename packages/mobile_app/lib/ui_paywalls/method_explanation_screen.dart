import 'package:flutter/cupertino.dart';
import 'package:intl/intl.dart';
import 'package:mobile_app/common_imports.dart';
import 'package:mobile_app/ui_home/hooks/use_monetization_type.dart';

/// {@template method_explanation_screen}
/// An interactive screen that guides users through the budgeting method.
/// {@endtemplate}
class MethodExplanationScreen extends StatefulWidget {
  /// {@macro method_explanation_screen}
  const MethodExplanationScreen({
    required this.isFirstOpening,
    super.key,
  });
  final bool isFirstOpening;

  @override
  State<MethodExplanationScreen> createState() =>
      _MethodExplanationScreenState();
}

final _kMoneyPrefix = LocalizedMap(
  value: {
    languages.en: r'$',
    languages.ru: '‚ÇΩ',
    languages.it: '‚Ç¨',
  },
);

class _MethodExplanationScreenState extends State<MethodExplanationScreen>
    with HasStates {
  final PageController _pageController = PageController();
  double? currentBalance;
  double? expenses;
  DateTime? nextSalaryDate;
  double? dailyBudget;

  @override
  void dispose() {
    _pageController.dispose();
    super.dispose();
  }

  void _nextPage() {
    if (_pageController.page! < 3) {
      unawaited(
        _pageController.nextPage(
          duration: const Duration(milliseconds: 300),
          curve: Curves.easeInOut,
        ),
      );
    }
  }

  void _previousPage() {
    if (_pageController.page! > 0) {
      unawaited(
        _pageController.previousPage(
          duration: const Duration(milliseconds: 300),
          curve: Curves.easeInOut,
        ),
      );
    } else {
      Navigator.pop(context);
    }
  }

  void _calculateDailyBudget() {
    if (currentBalance != null && expenses != null && nextSalaryDate != null) {
      final availableBalance = currentBalance! - expenses!;
      final daysUntilSalary =
          nextSalaryDate!.difference(DateTime.now()).inDays + 1;
      setState(() {
        dailyBudget = availableBalance / daysUntilSalary;
      });
    }
  }

  @override
  Widget build(final BuildContext context) {
    final locale = useLocale(context);
    return Scaffold(
      appBar: AppBar(
        leading: () {
          final back = CupertinoNavigationBarBackButton(
            onPressed: _previousPage,
          );
          if (widget.isFirstOpening) {
            if (_pageController.hasClients && _pageController.page! > 0) {
              return back;
            } else {
              return SizedBox();
            }
          } else {
            return back;
          }
        }(),
        title: Text(
          LocalizedMap(
            value: {
              languages.en: 'Magic of Budgeting',
              languages.ru: '–ú–∞–≥–∏—è –±—é–¥–∂–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
              languages.it: 'Magia del Budgeting',
            },
          ).getValue(locale),
        ),
      ),
      body: PageView(
        controller: _pageController,
        physics: const NeverScrollableScrollPhysics(),
        children: [
          _BalancePage(
            onNext: (final value) {
              setState(() => currentBalance = value);
              _nextPage();
            },
          ),
          _ExpensesPage(
            onNext: (final value) {
              setState(() => expenses = value);
              _nextPage();
            },
          ),
          _SalaryDatePage(
            onNext: (final value) {
              setState(() => nextSalaryDate = value);
              _calculateDailyBudget();
              _nextPage();
            },
          ),
          _ResultPage(
            isFirstOpening: widget.isFirstOpening,
            currentBalance: currentBalance,
            expenses: expenses,
            nextSalaryDate: nextSalaryDate,
            dailyBudget: dailyBudget,
            onFinish: () {
              monthlyCubit
                ..onAmountChange(currentBalance.toString())
                ..onSavingsChange(expenses.toString())
                ..onUpdateNextBudgetDay(nextSalaryDate);

              Navigator.of(context).pop();
            },
          ),
        ],
      ),
    );
  }
}

class _BalancePage extends StatelessWidget {
  const _BalancePage({required this.onNext});

  final void Function(double) onNext;

  @override
  Widget build(final BuildContext context) {
    final controller = TextEditingController();
    final locale = useLocale(context);
    return _GuidePage(
      title: LocalizedMap(
        value: {
          languages.en: "What's in Your Pocket?",
          languages.ru: '–ß—Ç–æ —É —Ç–µ–±—è –≤ –∫–∞—Ä–º–∞–Ω—Å–∞—Ö?',
          languages.it: "Cosa c'√® nel tuo portafoglio?",
        },
      ).getValue(locale),
      description: LocalizedMap(
        value: {
          languages.en:
              "Let's start with how much money you have right now. Don't worry, we won't tell anyone! ü§´",
          languages.ru:
              '–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å —Ç–æ–≥–æ, —Å–∫–æ–ª—å–∫–æ —É –≤–∞—Å –¥–µ–Ω–µ–≥ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å. –ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, –º—ã –Ω–∏–∫–æ–º—É –Ω–µ —Ä–∞—Å—Å–∫–∞–∂–µ–º! ü§´',
          languages.it:
              'Iniziamo con quanto denaro hai in questo momento. Non preoccuparti, non lo diremo a nessuno! ü§´',
        },
      ).getValue(locale),
      content: TextField(
        controller: controller,
        keyboardType: TextInputType.number,
        decoration: InputDecoration(
          prefixText: _kMoneyPrefix.getValue(locale),
          hintText: LocalizedMap(
            value: {
              languages.en: 'Enter your current balance',
              languages.ru: '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å',
              languages.it: 'Inserisci il tuo saldo attuale',
            },
          ).getValue(locale),
        ),
      ),
      onNext: () {
        final value = double.tryParse(controller.text);
        if (value != null && value > 0) {
          onNext(value);
        }
      },
    );
  }
}

class _ExpensesPage extends StatelessWidget {
  const _ExpensesPage({required this.onNext});

  final void Function(double) onNext;

  @override
  Widget build(final BuildContext context) {
    final controller = TextEditingController();
    final locale = useLocale(context);
    return _GuidePage(
      title: LocalizedMap(
        value: {
          languages.en: 'Time for Some Adulting',
          languages.ru: '–í—Ä–µ–º—è –¥–ª—è –≤–∑—Ä–æ—Å–ª–æ–π –∂–∏–∑–Ω–∏',
          languages.it: '√à ora di fare gli adulti',
        },
      ).getValue(locale),
      description: LocalizedMap(
        value: {
          languages.en:
              "Now, let's add up all the boring stuff you need to pay for. Think rent, subscriptions, loan payments - you know, the essentials. üí∏",
          languages.ru:
              '–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ —Å–ª–æ–∂–∏–º –≤—Å–µ —Å–∫—É—á–Ω—ã–µ –≤–µ—â–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –Ω—É–∂–Ω–æ –ø–ª–∞—Ç–∏—Ç—å. –î—É–º–∞–π—Ç–µ –æ–± –∞—Ä–µ–Ω–¥–µ, –ø–æ–¥–ø–∏—Å–∫–∞—Ö, –ø–ª–∞—Ç–µ–∂–∞—Ö –ø–æ –∫—Ä–µ–¥–∏—Ç—É - –≤—ã –∑–Ω–∞–µ—Ç–µ, –æ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–º. üí∏',
          languages.it:
              "Ora, sommiamo tutte le cose noiose che devi pagare. Pensa all'affitto, agli abbonamenti, ai pagamenti dei prestiti - sai, le cose essenziali. üí∏",
        },
      ).getValue(locale),
      content: TextField(
        controller: controller,
        keyboardType: TextInputType.number,
        decoration: InputDecoration(
          prefixText: _kMoneyPrefix.getValue(locale),
          hintText: LocalizedMap(
            value: {
              languages.en: 'Enter your total expenses',
              languages.ru: '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –æ–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã',
              languages.it: 'Inserisci le tue spese totali',
            },
          ).getValue(locale),
        ),
      ),
      onNext: () {
        final value = double.tryParse(controller.text);
        if (value != null && value >= 0) {
          onNext(value);
        }
      },
    );
  }
}

class _SalaryDatePage extends StatelessWidget {
  const _SalaryDatePage({required this.onNext});

  final void Function(DateTime) onNext;

  @override
  Widget build(final BuildContext context) {
    DateTime? selectedDate;
    final locale = useLocale(context);
    return _GuidePage(
      title: LocalizedMap(
        value: {
          languages.en: 'When Does the Money Train Arrive?',
          languages.ru: '–ö–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –¥–µ–Ω–µ–∂–Ω—ã–π –ø–æ–µ–∑–¥?',
          languages.it: 'Quando arriva il treno dei soldi?',
        },
      ).getValue(locale),
      description: LocalizedMap(
        value: {
          languages.en:
              "Last step! When's your next payday? This helps us figure out how long your money needs to last. üóìÔ∏è",
          languages.ru:
              '–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥! –ö–æ–≥–¥–∞ –≤–∞—à–∞ —Å–ª–µ–¥—É—é—â–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞? –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º –≤—ã—è—Å–Ω–∏—Ç—å, —Å–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞ –ø—Ä–æ–ø–∏—Ç–∞–Ω–∏–µ. üóìÔ∏è',
          languages.it:
              'Ultimo passo! Quando √® il tuo prossimo giorno di paga? Questo ci aiuta a capire per quanto tempo devono durare i tuoi soldi. üóìÔ∏è',
        },
      ).getValue(locale),
      content: ElevatedButton(
        child: Text(
          selectedDate == null
              ? LocalizedMap(
                  value: {
                    languages.en: 'Select Next Salary Date',
                    languages.ru: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–π –∑–∞—Ä–ø–ª–∞—Ç—ã',
                    languages.it: 'Seleziona la data del prossimo stipendio',
                  },
                ).getValue(locale)
              : DateFormat('MMM d, y').format(selectedDate),
        ),
        onPressed: () async {
          final date = await showDatePicker(
            context: context,
            initialDate: DateTime.now().add(const Duration(days: 30)),
            firstDate: DateTime.now(),
            lastDate: DateTime.now().add(const Duration(days: 365)),
          );
          if (date != null) {
            selectedDate = date;
            onNext(date);
          }
        },
      ),
      onNext: null,
    );
  }
}

class _ResultPage extends StatelessWidget {
  const _ResultPage({
    required this.currentBalance,
    required this.expenses,
    required this.nextSalaryDate,
    required this.dailyBudget,
    required this.onFinish,
    required this.isFirstOpening,
  });

  final bool isFirstOpening;
  final double? currentBalance;
  final double? expenses;
  final DateTime? nextSalaryDate;
  final double? dailyBudget;
  final VoidCallback onFinish;

  @override
  Widget build(final BuildContext context) {
    final locale = useLocale(context);
    final (:isSubscriptionMonetization) =
        useIsSubscriptionMonetization(context);
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            LocalizedMap(
              value: {
                languages.en: 'üéâ Congratulations!',
                languages.ru: 'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!',
                languages.it: 'üéâ Congratulazioni!',
              },
            ).getValue(locale),
            style: const TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
          ).animate().fadeIn().slideX(),
          const SizedBox(height: 16),
          Text(
            LocalizedMap(
              value: {
                languages.en:
                    "You've just mastered the art of simple budgeting! Here's your financial snapshot:",
                languages.ru:
                    '–í—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Å–≤–æ–∏–ª–∏ –∏—Å–∫—É—Å—Å—Ç–≤–æ –ø—Ä–æ—Å—Ç–æ–≥–æ –±—é–¥–∂–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è! –í–æ—Ç –≤–∞—à —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–Ω–∏–º–æ–∫:',
                languages.it:
                    "Hai appena padroneggiato l'arte del budgeting semplice! Ecco il tuo snapshot finanziario:",
              },
            ).getValue(locale),
            style: Theme.of(context).textTheme.bodyLarge,
          ).animate().fadeIn().slideX(),
          const SizedBox(height: 24),
          _ResultCard(
            currentBalance: currentBalance,
            expenses: expenses,
            nextSalaryDate: nextSalaryDate,
            dailyBudget: dailyBudget,
          ),
          const SizedBox(height: 24),
          Text(
            LocalizedMap(
              value: {
                languages.en:
                    "Now you know exactly how much you can spend each day without ending up with holey socks üß¶. Remember, this is a tool - some days you might spend less, others a bit more. The key is to stay aware and make informed decisions. You've got this! üí™",
                languages.ru:
                    '–¢–µ–ø–µ—Ä—å –≤—ã —Ç–æ—á–Ω–æ –∑–Ω–∞–µ—Ç–µ, —Å–∫–æ–ª—å–∫–æ –º–æ–∂–µ—Ç–µ —Ç—Ä–∞—Ç–∏—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –Ω–µ –¥–æ–π—Ç–∏ –¥–æ –¥—ã—Ä—è–≤—ã—Ö –Ω–æ—Å–æ–∫ üß¶. –ü–æ–º–Ω–∏—Ç–µ, —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç - –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–Ω–∏ –≤—ã –º–æ–∂–µ—Ç–µ —Ç—Ä–∞—Ç–∏—Ç—å –º–µ–Ω—å—à–µ, –≤ –¥—Ä—É–≥–∏–µ - –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ. –ì–ª–∞–≤–Ω–æ–µ - –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ –∫—É—Ä—Å–µ –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è. –£ –≤–∞—Å –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è! üí™',
                languages.it:
                    "Ora sai esattamente quanto puoi spendere ogni giorno senza ritrovarti con i calzini bucati üß¶. Ricorda, questo √® uno strumento - alcuni giorni potresti spendere meno, altri un po' di pi√π. La chiave √® rimanere consapevoli e prendere decisioni informate. Ce la puoi fare! üí™",
              },
            ).getValue(locale),
            style: Theme.of(context).textTheme.bodyLarge,
          ).animate().fadeIn().slideX(),
          const SizedBox(height: 24),
          if (isFirstOpening && isSubscriptionMonetization) ...[
            Text(
              LocalizedMap(
                value: {
                  languages.en:
                      'The basic functions of this app are free. To use the most advanced and extra functions, there is a subscription available.',
                  languages.ru:
                      '–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —ç—Ç–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã. –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∞–º—ã—Ö –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞.',
                  languages.it:
                      'Le funzioni di base di questa app sono gratuite. Per utilizzare le funzioni pi√π avanzate ed extra, √® disponibile un abbonamento.',
                },
              ).getValue(locale),
              style: Theme.of(context).textTheme.bodyMedium,
              textAlign: TextAlign.center,
            ).animate().fadeIn().slideX(),
            const SizedBox(height: 24),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                ElevatedButton(
                  onPressed: onFinish,
                  child: Text(
                    LocalizedMap(
                      value: {
                        languages.en: 'Continue Free',
                        languages.ru: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ',
                        languages.it: 'Continua gratis',
                      },
                    ).getValue(locale),
                  ),
                ).animate().fadeIn().slideX(),
                ElevatedButton(
                  onPressed: () {
                    final controller = AppPathsController.of(context);
                    // Save the entered data
                    onFinish();
                    controller.toPaywall();
                  },
                  child: Text(
                    LocalizedMap(
                      value: {
                        languages.en: 'Purchase',
                        languages.ru: '–ö—É–ø–∏—Ç—å',
                        languages.it: 'Acquista',
                      },
                    ).getValue(locale),
                  ),
                ).animate().fadeIn().slideX(),
              ],
            ),
          ] else
            Center(
              child: ElevatedButton(
                onPressed: onFinish,
                child: Text(
                  LocalizedMap(
                    value: {
                      languages.en: "Cool! Let's start!",
                      languages.ru: '–ö—Ä—É—Ç–æ! –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏–º!',
                      languages.it: 'Fantastico! Iniziamo!',
                    },
                  ).getValue(locale),
                ),
              ).animate().fadeIn().slideX(),
            ),
          const SizedBox(height: 16),
          Text(
            LocalizedMap(
              value: {
                languages.en:
                    'Disclaimer: This is not financial advice. Please consult with a qualified financial advisor for personalized recommendations.',
                languages.ru:
                    '–û—Ç–∫–∞–∑ –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏: –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ - —ç—Ç–æ –Ω–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.',
                languages.it:
                    'Disclaimer: Questo non √® un consiglio finanziario. Si prega di consultare un consulente finanziario qualificato per raccomandazioni personalizzate.',
              },
            ).getValue(locale),
            style: Theme.of(context).textTheme.bodySmall,
            textAlign: TextAlign.center,
          ).animate().fadeIn(),
        ],
      ),
    );
  }
}

class _ResultCard extends StatelessWidget {
  const _ResultCard({
    required this.currentBalance,
    required this.expenses,
    required this.nextSalaryDate,
    required this.dailyBudget,
  });

  final double? currentBalance;
  final double? expenses;
  final DateTime? nextSalaryDate;
  final double? dailyBudget;

  @override
  Widget build(final BuildContext context) {
    final locale = useLocale(context);

    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            _ResultRow(
              LocalizedMap(
                value: {
                  languages.en: 'Current Balance:',
                  languages.ru: '–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:',
                  languages.it: 'Saldo attuale:',
                },
              ).getValue(locale),
              '${_kMoneyPrefix.getValue(locale)}${currentBalance?.toStringAsFixed(2)}',
            ),
            _ResultRow(
              LocalizedMap(
                value: {
                  languages.en: 'Required Expenses:',
                  languages.ru: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞—Å—Ö–æ–¥—ã:',
                  languages.it: 'Spese necessarie:',
                },
              ).getValue(useLocale(context)),
              '${_kMoneyPrefix.getValue(locale)}${expenses?.toStringAsFixed(2)}',
            ),
            _ResultRow(
              LocalizedMap(
                value: {
                  languages.en: 'Next Salary Date:',
                  languages.ru: '–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞—Ä–ø–ª–∞—Ç—ã:',
                  languages.it: 'Data del prossimo stipendio:',
                },
              ).getValue(locale),
              DateFormat('MMM d, y').format(nextSalaryDate!),
            ),
            const Divider(),
            _ResultRow(
              LocalizedMap(
                value: {
                  languages.en: 'Your Daily Budget:',
                  languages.ru: '–í–∞—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±—é–¥–∂–µ—Ç:',
                  languages.it: 'Il tuo budget giornaliero:',
                },
              ).getValue(locale),
              '${_kMoneyPrefix.getValue(locale)}${dailyBudget?.toStringAsFixed(2)}',
              isHighlighted: true,
            ),
          ],
        ),
      ),
    ).animate().fadeIn().scale();
  }
}

class _ResultRow extends StatelessWidget {
  const _ResultRow(this.label, this.value, {this.isHighlighted = false});

  final String label;
  final String value;
  final bool isHighlighted;

  @override
  Widget build(final BuildContext context) => Padding(
        padding: const EdgeInsets.symmetric(vertical: 4),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Text(
              label,
              style: TextStyle(
                fontWeight: isHighlighted ? FontWeight.bold : FontWeight.normal,
              ),
            ),
            Text(
              value,
              style: TextStyle(
                fontWeight: isHighlighted ? FontWeight.bold : FontWeight.normal,
                color: isHighlighted
                    ? Theme.of(context).colorScheme.primary
                    : null,
              ),
            ),
          ],
        ),
      );
}

class _GuidePage extends StatelessWidget {
  const _GuidePage({
    required this.title,
    required this.description,
    required this.content,
    required this.onNext,
  });

  final String title;
  final String description;
  final Widget content;
  final VoidCallback? onNext;

  @override
  Widget build(final BuildContext context) => SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              title,
              style: const TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
            ).animate().fadeIn().slideX(),
            const SizedBox(height: 16),
            Text(
              description,
              style: Theme.of(context).textTheme.bodyLarge,
            ).animate().fadeIn().slideX(),
            const SizedBox(height: 24),
            content.animate().fadeIn().scale(),
            const SizedBox(height: 24),
            if (onNext != null)
              ElevatedButton(
                onPressed: onNext,
                child: Text(
                  LocalizedMap(
                    value: {
                      languages.en: 'Next',
                      languages.ru: '–î–∞–ª–µ–µ',
                      languages.it: 'Avanti',
                    },
                  ).getValue(useLocale(context)),
                ),
              ).animate().fadeIn().slideX(),
          ],
        ),
      );
}
